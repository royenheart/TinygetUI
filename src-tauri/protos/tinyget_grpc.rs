// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SoftsResquest {
    #[prost(string, optional, tag = "1")]
    pub pkgs: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub only_installed: bool,
    #[prost(bool, tag = "3")]
    pub only_upgradable: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SoftsInstallRequests {
    #[prost(string, repeated, tag = "1")]
    pub pkgs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SoftsUninstallRequests {
    #[prost(string, repeated, tag = "1")]
    pub pkgs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SysUpdateRequest {
    #[prost(bool, tag = "1")]
    pub upgrade: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SysHistoryRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Package {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub architecture: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub installed: bool,
    #[prost(bool, tag = "6")]
    pub automatically_installed: bool,
    #[prost(bool, tag = "7")]
    pub upgradable: bool,
    #[prost(string, optional, tag = "8")]
    pub available_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub repo: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct History {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub command: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub date: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    pub operations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SoftsResp {
    #[prost(message, repeated, tag = "1")]
    pub softs: ::prost::alloc::vec::Vec<Package>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SysHistoryResp {
    #[prost(message, repeated, tag = "1")]
    pub histories: ::prost::alloc::vec::Vec<History>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SoftsInstallResp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, optional, tag = "2")]
    pub stdout: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub stderr: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SoftsUninstallResp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, optional, tag = "2")]
    pub stdout: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub stderr: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SysUpdateResp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, optional, tag = "2")]
    pub stdout: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub stderr: ::core::option::Option<::prost::alloc::string::String>,
}
/// Generated client implementations.
pub mod tinyget_grpc_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TinygetGrpcClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TinygetGrpcClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TinygetGrpcClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TinygetGrpcClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TinygetGrpcClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn softs_get(
            &mut self,
            request: impl tonic::IntoRequest<super::SoftsResquest>,
        ) -> std::result::Result<tonic::Response<super::SoftsResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsGet",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsGet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn softs_get_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::SoftsResquest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Package>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsGetStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsGetStream"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn softs_get_bidi_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::SoftsResquest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Package>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsGetBidiStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsGetBidiStream"),
                );
            self.inner.streaming(req, path, codec).await
        }
        pub async fn softs_install(
            &mut self,
            request: impl tonic::IntoRequest<super::SoftsInstallRequests>,
        ) -> std::result::Result<
            tonic::Response<super::SoftsInstallResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsInstall",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsInstall"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn softs_install_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::SoftsInstallRequests>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SoftsInstallResp>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsInstallStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsInstallStream"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn softs_install_bidi_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::SoftsInstallRequests,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SoftsInstallResp>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsInstallBidiStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsInstallBidiStream"),
                );
            self.inner.streaming(req, path, codec).await
        }
        pub async fn softs_uninstall(
            &mut self,
            request: impl tonic::IntoRequest<super::SoftsUninstallRequests>,
        ) -> std::result::Result<
            tonic::Response<super::SoftsUninstallResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsUninstall",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsUninstall"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn softs_uninstall_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::SoftsUninstallRequests>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SoftsUninstallResp>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsUninstallStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SoftsUninstallStream"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn softs_uninstall_bidi_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::SoftsUninstallRequests,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SoftsUninstallResp>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SoftsUninstallBidiStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "tinyget_grpc.TinygetGRPC",
                        "SoftsUninstallBidiStream",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
        pub async fn sys_update(
            &mut self,
            request: impl tonic::IntoRequest<super::SysUpdateRequest>,
        ) -> std::result::Result<tonic::Response<super::SysUpdateResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SysUpdate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SysUpdate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sys_update_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::SysUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SysUpdateResp>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SysUpdateStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SysUpdateStream"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn sys_update_bidi_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::SysUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SysUpdateResp>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SysUpdateBidiStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SysUpdateBidiStream"),
                );
            self.inner.streaming(req, path, codec).await
        }
        pub async fn sys_history(
            &mut self,
            request: impl tonic::IntoRequest<super::SysHistoryRequest>,
        ) -> std::result::Result<tonic::Response<super::SysHistoryResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SysHistory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SysHistory"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sys_history_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::SysHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::History>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SysHistoryStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SysHistoryStream"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn sys_history_bidi_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::SysHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::History>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tinyget_grpc.TinygetGRPC/SysHistoryBidiStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tinyget_grpc.TinygetGRPC", "SysHistoryBidiStream"),
                );
            self.inner.streaming(req, path, codec).await
        }
    }
}
